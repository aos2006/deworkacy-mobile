@import "~susy/sass/susy";

$susy: (
        'columns': susy-repeat(12),
        'gutters': 0.25,
        'spread': 'narrow',
        'container-spread': 'narrow',
        'svg-grid-colors': rgba(10, 78, 89, .5),
);

$breakpoints: (
      'phone': (
              'min-width': 320px,
      ),
);

@mixin span(
  $span,
  $config: ()
) {
  flex: 1 1 span($span, $config);
  // split the gutter on each side of the element…
  padding: gutter($span, $config) / 2;
}

@mixin susy-use(
  $config
) {
  //  parse and normalize any shorthand arguments
  $config: susy-compile($config);

  // record the global settings -
  // and update the global variable with our new settings
  $global: $susy;
  $susy: map-merge($susy, $config) !global;

  // any content inside this mixin
  // will use the local settings
  @content;

  // return the global variable to its initial value
  $susy: $global !global;
}

@mixin susy-at(
  $config
) {
  //  parse and normalize any shorthand arguments
  $config: susy-compile($config);

  // build min-and-max queries
  $min: map-get($config, 'min-width');
  $min: if($min, '(min-width: #{$min})', null);
  $max: map-get($config, 'max-width');
  $max: if($max, '(max-width: #{$max})', null);

  // combine them if we need both
  $and: if($min and $max, '#{$min} and #{$max}', null);
  // or fall back to the value we need…
  $query: $and or $min or $max;

  // apply the results…
  @media #{$query} {
    @include susy-use($config) {
      @content;
    }
  }
}


@mixin susy-phone() {
  @include susy-at(map-get($breakpoints, 'phone')) {
    @content;
  }
}

@mixin row() {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  justify-content: flex-start;
}

@mixin fullWidth() {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
}
